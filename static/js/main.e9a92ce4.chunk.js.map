{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Info","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","collapse","setState","react_default","a","createElement","className","Button","color","onClick","style","margin","Collapse","isOpen","Card","CardBody","target","rel","href","Component","App","_this2","age","chest","stomach","leg","submit","inputdone","handleChange","onSubmit","event","value","name","defineProperty","check","foldsum","Number","bodyfat","Math","pow","undefined","find","e","minHeight","min","type","onChange","toFixed","App_Info","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9a92ce4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\n\nclass Info extends Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = { collapse: false };\n  }\n\n  toggle() {\n    this.setState({ collapse: !this.state.collapse });\n  }\n\nrender() {\n\nreturn (\n<div className=\"container info\"><div className=\"row\"><div className=\"col-sm\">\n<Button color=\"secondary\" className=\"infobttn\" onClick={this.toggle} style={{ margin: '1rem' }}>Click for info</Button>\n<Collapse isOpen={this.state.collapse}>\n<Card>\n<CardBody>\n<p>The formula has been taken from <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.sfd.pl/Zmierz_dok%C5%82adnie_sw%C3%B3j_poziom_t%C5%82uszczu-czyli_wielopartyjna_metoda_pomiaru_fa%C5%82domierzem-t263219.html\">this page</a>.</p>\n<p>It is based on skinfold measurement method <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.ptdirect.com/training-delivery/client-assessment/taking-skin-fold-body-fat-measurements\">described here</a>.</p>\n<p>Measurements have to be taken from:</p>\n<ul>\n<li>Your chest area</li>\n<li>Your stomach area</li>  \n<li>Your thigh area</li>    \n</ul> \n</CardBody>\n</Card>\n</Collapse>\n</div></div></div>\n    )\n  }\n}\n\nclass App extends Component {\nconstructor(props){\n  super(props);\n  this.state={\n    age: 0,\n    chest: 0,\n    stomach: 0,\n    leg: 0,\n    submit: false,\n    inputdone: false\n  }\n\n  this.handleChange = this.handleChange.bind(this);\n  this.onSubmit = this.onSubmit.bind(this);\n}\n\nhandleChange(event){\n  const target = event.target;\n  const value = event.target.value;\n  const name = target.name;\n  this.setState({\n    [name]: value\n  })\n  this.setState({submit: false})\n}\n\nonSubmit(){\n  this.setState({\n    submit: true\n  })\n}\n\nrender() {\nlet age = this.state.age;\nlet check = [this.state.age, this.state.chest, this.state.leg, this.state.stomach ]\nlet foldsum = Number(this.state.chest) + Number(this.state.leg) + Number(this.state.stomach);\nlet foldsumpow = Math.pow(foldsum, 2);\nlet density = 1.1093800 - (0.0008267 * foldsum) + (0.0000016 * foldsumpow) - (0.0002574 * age);\nlet bodyfat = (457 / density) - 414.2;\nlet submit = this.state.submit;\nlet inputdone =  check.find(e => e === '' || e === 0) !== undefined ? false : true;\n\n\nreturn (\n<div style={{minHeight: \"100%\"}}>\n<h1 className=\"heading\">BODY FAT CALCULATOR</h1>\n      <div className=\"container\">\n      <div className=\"row\">\n      <div className=\"col-sm text-center\">\n      <label className=\"label\">Age</label>\n      <input name=\"age\" min=\"0\" value={this.state.age} className=\"input\" type=\"number\" onChange={this.handleChange}></input>\n      </div>\n      <div className=\"col-sm text-center\">\n      <label className=\"label\">Chest (mm)</label>\n      <input name=\"chest\" className=\"input\" min=\"0\" value={this.state.chest} type=\"number\" onChange={this.handleChange}></input>\n      </div>\n      <div className=\"col-sm text-center\">\n      <label className=\"label\">Stomach (mm)</label>\n      <input name=\"stomach\" className=\"input\" min=\"0\" value={this.state.stomach} type=\"number\" onChange={this.handleChange}></input>\n      </div>\n      <div className=\"col-sm text-center\">\n      <label className=\"label\">Thigh (mm)</label>\n      <input name=\"leg\" className=\"input\" min=\"0\" value={this.state.leg} type=\"number\" onChange={this.handleChange}></input>\n      </div>\n      </div>\n      {inputdone && !submit && <button className=\"buttonfat\" onClick={this.onSubmit}>Calculate body fat</button>}\n      {submit && <div className=\"row\"><div className=\"col-sm bodyfat\">{\"Body fat \" + Number(bodyfat).toFixed(2) + \"%\"}</div></div>}\n      {!inputdone && <div className=\"row\"><div className=\"col-sm bodyfat\">Please fill all input fields</div></div>}\n      </div>\n      <Info />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}